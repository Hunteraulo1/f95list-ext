name: Release Extension

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - preview

env:
  FIREFOX_EXTENSION_ID: "{9f7488b3-d704-4894-bac8-5dc3068fd6b9}"

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        
      - name: Install dependencies
        run: bun install
        
      - name: Install web-ext
        run: npm install -g web-ext
        
      - name: Install jq
        run: sudo apt-get install jq
        
      - name: Get version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
      - name: Get previous version
        id: get_previous_version
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          PREVIOUS_VERSION=${PREVIOUS_TAG#v}
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        
      - name: Get release type
        id: get_release_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ $PR_TITLE == *"+ RELEASE"* ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          elif [[ $PR_TITLE == *"+ PRE-RELEASE"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "Neither RELEASE nor PRE-RELEASE found in PR title"
            exit 1
          fi
        
      - name: Build extensions
        run: bun run build
        
      - name: Sign Firefox extension
        env:
          MOZILLA_API_KEY: ${{ secrets.MOZILLA_API_KEY }}
          MOZILLA_API_SECRET: ${{ secrets.MOZILLA_API_SECRET }}
        run: |
          web-ext sign \
            --api-key ${{ secrets.MOZILLA_API_KEY }} \
            --api-secret ${{ secrets.MOZILLA_API_SECRET }} \
            --artifacts-dir .output/artifacts \
            --channel unlisted \
            -s .output/firefox-mv2
            
      - name: Rename Firefox artifact
        run: |
          cd .output/artifacts
          for file in *.xpi; do
            if [ -f "$file" ]; then
              mv "$file" "${file%.xpi}_firefox.xpi"
            fi
          done
          
      - name: Create Chrome artifact
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          cd .output/
          if [ ! -d "artifacts" ]; then
            mkdir artifacts
          fi
          cd chrome-mv3
          zip -r9 ../artifacts/f95list_ext-${VERSION}_chrome.zip ./*

      - name: Update updates.json
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Mise à jour de updates.json
          jq --arg version "$VERSION" \
             --arg url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/f95list_ext-${VERSION}_firefox.xpi" \
             --arg id "$FIREFOX_EXTENSION_ID" \
             '.addons[$id].updates[0].version = $version | .addons[$id].updates[0].update_link = $url' \
             updates.json > updates.json.tmp && mv updates.json.tmp updates.json

      - name: Commit updates.json changes
        if: steps.get_release_type.outputs.prerelease == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add updates.json
          git commit -m ":bookmark: update updates.json for version ${{ steps.get_version.outputs.version }}"
          git push origin ${GITHUB_REF#refs/heads/}
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            .output/artifacts/*_chrome.zip
            .output/artifacts/*_firefox.xpi
          tag_name: v${{ steps.get_version.outputs.version }}
          prerelease: ${{ steps.get_release_type.outputs.prerelease }}
          body: |
            ## Installation
            **Pour Firefox:** *(mise à jour automatique)*
            - Il faut glisser le fichier **.xpi** sur le navigateur _ou l'ouvrir avec Firefox_.

            **Pour Chrome/Opera/Brave/Edge:** *(mise à jour manuelle)*
            - Il faut aller dans la page des extensions _(chrome://extensions/)_
            - Cliquer en haut à droite sur **Mode développeur**
            - Puis glisser l'archive **.zip** dans la page

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_previous_version.outputs.previous_version }}...v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
